// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	context "context"
	reflect "reflect"
	model "test_news/internal/model"
	service "test_news/internal/service"

	gomock "github.com/golang/mock/gomock"
)

// MockNews is a mock of News interface.
type MockNews struct {
	ctrl     *gomock.Controller
	recorder *MockNewsMockRecorder
}

// MockNewsMockRecorder is the mock recorder for MockNews.
type MockNewsMockRecorder struct {
	mock *MockNews
}

// NewMockNews creates a new mock instance.
func NewMockNews(ctrl *gomock.Controller) *MockNews {
	mock := &MockNews{ctrl: ctrl}
	mock.recorder = &MockNewsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNews) EXPECT() *MockNewsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNews) Create(ctx context.Context, news model.News) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, news)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNewsMockRecorder) Create(ctx, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNews)(nil).Create), ctx, news)
}

// FindWithCategories mocks base method.
func (m *MockNews) FindWithCategories(ctx context.Context, limit, offset int) ([]model.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWithCategories", ctx, limit, offset)
	ret0, _ := ret[0].([]model.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWithCategories indicates an expected call of FindWithCategories.
func (mr *MockNewsMockRecorder) FindWithCategories(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWithCategories", reflect.TypeOf((*MockNews)(nil).FindWithCategories), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockNews) Update(ctx context.Context, input service.NewsUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNewsMockRecorder) Update(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNews)(nil).Update), ctx, input)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuth) Create() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuth)(nil).Create))
}

// Validate mocks base method.
func (m *MockAuth) Validate(tokenString string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", tokenString)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockAuthMockRecorder) Validate(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAuth)(nil).Validate), tokenString)
}
